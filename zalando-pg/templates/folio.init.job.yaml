{{- if $.Values.global.db.initDb }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-folio-init-job
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
spec:
  template:
    spec:
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Release.Name }}-create-folio-dbs
        image: {{ $.Values.image.repositoryBaseUrl }}folio-tools:{{ $.Values.image.folioToolsTag }} 
        imagePullPolicy:  "IfNotPresent"
        env:
        - name: PG_HOST
          valueFrom:
            secretKeyRef:
              name: db-connect-folio
              key: DB_HOST
        - name: PG_PORT
          valueFrom:
            secretKeyRef:
              name: db-connect-folio
              key: DB_PORT
        - name: PG_USER
          value: postgres
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres.{{ .Values.teamId }}-{{ .Release.Name }}.credentials.postgresql.acid.zalan.do 
              key: password
        - name: FOLIO_DATABASE
          valueFrom:
            secretKeyRef:
              name: db-connect-folio
              key: DB_DATABASE
        - name: FOLIO_USERNAME
          valueFrom:
            secretKeyRef:
              name: db-connect-folio
              key: DB_USERNAME
        - name: FOLIO_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-connect-folio
              key: DB_PASSWORD
        - name: OKAPI_DATABASE
          valueFrom:
            secretKeyRef:
              name: db-connect-okapi
              key: PG_DATABASE
        - name: OKAPI_USERNAME
          valueFrom:
            secretKeyRef:
              name: db-connect-okapi
              key: PG_USERNAME
        - name: OKAPI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-connect-okapi
              key: PG_PASSWORD
        envFrom:
        - secretRef:
            name: pg-superuser-secret
        args: ["kube-scripts/folio-db-init.sh"]
        volumeMounts:
        - name: scriptvolume
          mountPath: "/usr/src/app/kube-scripts"
      volumes:
      - name: scriptvolume
      # persistentVolumeClaim:
      #      claimName: pvc-folio-scripts
        configMap:
          name: {{ $.Release.Name }}-scripts
          defaultMode: 0555
          optional: false
      restartPolicy: Never
  backoffLimit: 10
  ttlSecondsAfterFinished: 3600
# Der persistentVolumeClaim f√ºr das Init Script.
---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: pvc-folio-scripts
#   namespace: folio-backend
# spec:
#   storageClassName: local-path
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 1Gi
{{- end }}
